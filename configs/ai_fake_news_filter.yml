# ----------------------------------------------------------------
# Input configuration for consuming messages from a Kafka topic.
# ----------------------------------------------------------------
input:
  # A label for the input stream.
  label: "newsstream"
  kafka_franz:
    # List of Kafka seed brokers to connect to.
    seed_brokers:
      - "cv8f7929anc1h5oheft0.any.us-east-1.mpx.prd.cloud.redpanda.com:9092"
    # The topics to consume messages from.
    topics:
      - news_raw
    # Consumer group identifier for Kafka.
    consumer_group: "newsstream_group"
    # SASL authentication settings for connecting to Kafka.
    sasl:
      - mechanism: SCRAM-SHA-256
        username: ${secrets.REDACTED_USERNAME}
        password: ${secrets.REDACTED_PASSWORD}
    # TLS configuration to secure the connection.
    tls:
      enabled: true

# ----------------------------------------------------------------
# Pipeline for processing incoming messages.
# ----------------------------------------------------------------
pipeline:
  processors:
    # First processor: Check if either the "url" or "title" fields are empty.
    # If either is empty, mark the message as deleted.
    - mapping: |
        root = if json("url") == "" || json("title") == "" {
          deleted()
        } else {
          root
        }

    # Second processor: Use OpenAI's Chat Completion endpoint to assess the "fake news" likelihood.
    # It sends the title and URL to the API and expects a JSON response with a score and explanation.
    - openai_chat_completion:
        # Address of the OpenAI API.
        server_address: https://api.openai.com/v1
        # API key used for authentication, provided securely.
        api_key: "${secrets.OPENAI_API_KEY}" # No default (required)
        # Model to be used for generating the evaluation.
        model: gpt-4 # No default (required)
        # Prompt instructions for the model: evaluate the title and link for signs of fake news.
        prompt: |
          Your task is to evaluate the title and link of a webpage and determine the likelihood it is fake. Decide this by looking at the text for sensational language, lack of credible sources, absence of verifiable evidence, exaggerated or unsubstantiated claims, logical inconsistencies, heavy use of emotional appeals, frequent grammar or spelling errors, reliance on anonymous or untraceable quotes, one-sided narratives, and misleading or clickbait headlines. Give each a score from 1 to 100, with 100 being absolutely fake and 1 being probably not fake. Also include one sentence explaining your reasoning.

          Respond in JSON only in the format of {"result": {"id": "${!this.id}", "url": "${!this.url}", "title": "${!this.title}", "score": 50, "reason": "This is looks fake or not fake because XYZ"}}

          Set score and reason based on your results.

          Here is the webpage title and url:
          ${!this.title} + ${!this.url}

          Only respond in valid JSON format. Respond strictly in JSON format with no additional text before or after. Do not include ```json

    # Third processor: Merge the API response with the original message.
    - mapping: |
        root = root.merge(this)

    # Fourth processor: Filter messages based on the fake news score.
    # If the score is greater than 20, keep the message; otherwise, mark it as deleted.
    - mapping: |
        root = if this.result.score > 20 {
          root
        } else {
          deleted()
        }
      
# ----------------------------------------------------------------
# Output configuration for sending processed messages to a Kafka topic.
# ----------------------------------------------------------------
output:
  kafka_franz:
    # List of Kafka seed brokers to connect to.
    seed_brokers:
      - "cv8f7929anc1h5oheft0.any.us-east-1.mpx.prd.cloud.redpanda.com:9092"
    # Kafka topic to publish the processed messages.
    topic: news_fake
    # SASL authentication settings for output connection.
    sasl:
      - mechanism: SCRAM-SHA-256
        username: ${secrets.REDACTED_USERNAME}
        password: ${secrets.REDACTED_PASSWORD}
    # TLS configuration to secure the connection.
    tls:
      enabled: true
    # Sets the Kafka message key to the "result.id" from the API's JSON response.
    key: "${! json(\"result.id\") }"
